<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreecraftCore.Serializer.API</name>
    </assembly>
    <members>
        <member name="T:FreecraftCore.Serializer.ContextKeyOverrideDecorator">
            <summary>
            Decorator used to override the key value of a <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.managedContext">
            <summary>
            Intenrally managed context.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.ContextRequirement">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.MemberMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.TypeMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.TargetType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextKeyOverrideDecorator.BuiltContextKey">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.ContextRequirementOverrideDecorator">
            <summary>
            Decorator used to override the <see cref="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.ContextRequirement"/> value.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.managedContext">
            <summary>
            Intenrally managed context.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.ContextRequirement">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.MemberMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.TypeMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.TargetType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextRequirementOverrideDecorator.BuiltContextKey">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.ContextTargetOverrideDecorator">
            <summary>
            Decorator used to override the <see cref="P:FreecraftCore.Serializer.ContextTargetOverrideDecorator.TargetType"/> of the provided
            <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextTargetOverrideDecorator.BuiltContextKey">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextTargetOverrideDecorator.MemberMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextTargetOverrideDecorator.TargetType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.ContextTargetOverrideDecorator.TypeMetadata">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.ContextTypeFlags">
            <summary>
            Flags that indicate the context of a serializable member.
            </summary>
        </member>
        <member name="T:FreecraftCore.Serializer.ISerializableTypeContext">
            <summary>
            Context used to make serialization determiniations about a type.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ISerializableTypeContext.ContextRequirement">
            <summary>
            Indicates if this context is unique to a member.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ISerializableTypeContext.MemberMetadata">
            <summary>
            The <see cref="N:FreecraftCore"/> attribute metadata associated with the member (if any).
            (If the context isn't unique then the Metadata is for the <see cref="T:System.Type"/> and not from a <see cref="T:System.Reflection.MemberInfo"/>)
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ISerializableTypeContext.TypeMetadata">
            <summary>
            The <see cref="N:FreecraftCore"/> attribute metadata associated with the <see cref="T:System.Type"/>
            (Not all types have interesting metadata)
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ISerializableTypeContext.TargetType">
            <summary>
            Represents the type.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ISerializableTypeContext.BuiltContextKey">
            <summary>
            The conextual lookup key that should be associated with the serialization context.
            If null there is no context.
            </summary>
        </member>
        <member name="T:FreecraftCore.Serializer.ContextualSerializerLookupKey">
            <summary>
            Lookup key for serializers that contain the context of the lookup.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextualSerializerLookupKey.ContextFlags">
            <summary>
            Indicates the context type for this lookup.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextualSerializerLookupKey.ContextSpecificKey">
            <summary>
            Represents the context specific key.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ContextualSerializerLookupKey.ContextType">
            <summary>
            The <see cref="T:System.Type"/> of the context.
            </summary>
        </member>
        <member name="T:FreecraftCore.Serializer.IContextKey">
            <summary>
            Contract for a key that "unlocks" a context.
            Basically the missing component between ContextFlags and the information associated with the context.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.IContextKey.Key">
            <summary>
            The integer the information maps to.
            Should be unique per state of context.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IContextualSerializerLookupKeyFactory.Create(System.Reflection.MemberInfo)">
            <summary>
            Tries to create a <see cref="T:FreecraftCore.Serializer.ContextualSerializerLookupKey"/> from the provided
            <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">Member info of the context.</param>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ContextualSerializerLookupKey"/> or null.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IContextualSerializerLookupKeyFactory.Create(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Tries to create a <see cref="T:FreecraftCore.Serializer.ContextualSerializerLookupKey"/> from the provided
            <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ContextualSerializerLookupKey"/> or null.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.NoContextKey">
            <summary>
            Represents a contextless context key.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.NoContextKey.Value">
            <summary>
            Singleton empty key.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.NoContextKey.Key">
            <summary>
            Always 0 when there is no context.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.NoContextKey.Equals(FreecraftCore.Serializer.IContextKey,FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.NoContextKey.GetHashCode(FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.SendSizeContextKey">
            <summary>
            Key that unlocks serializers that have a [SendSize(SizeType)] context.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.SendSizeContextKey.Key">
            <summary>
            Size/key
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.SendSizeContextKey.Equals(FreecraftCore.Serializer.IContextKey,FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SendSizeContextKey.GetHashCode(FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.SizeContextKey">
            <summary>
            Key that unlocks serializers that have a [*Size(size)] context.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.SizeContextKey.Key">
            <summary>
            Size/key
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.SizeContextKey.Equals(FreecraftCore.Serializer.IContextKey,FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SizeContextKey.GetHashCode(FreecraftCore.Serializer.IContextKey)">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.MemberInfoBasedSerializationContext.ContextRequirement">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.MemberInfoBasedSerializationContext.MemberMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.MemberInfoBasedSerializationContext.TypeMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.MemberInfoBasedSerializationContext.TargetType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.MemberInfoBasedSerializationContext.BuiltContextKey">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.SerializationContextRequirement">
            <summary>
            Enumeration of all potential context requirements.
            </summary>
        </member>
        <member name="F:FreecraftCore.Serializer.SerializationContextRequirement.Contextless">
            <summary>
            Indicates that the serialization can be done without member context.
            </summary>
        </member>
        <member name="F:FreecraftCore.Serializer.SerializationContextRequirement.RequiresContext">
            <summary>
            Indicates that a certain amount of context is required for serialization.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.TypeBasedSerializationContext.ContextRequirement">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.TypeBasedSerializationContext.MemberMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.TypeBasedSerializationContext.TypeMetadata">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.TypeBasedSerializationContext.TargetType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.DecoratorHandler.serializerProviderService">
            <summary>
            Serializer provider service.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.DecoratorHandler.CanHandle(FreecraftCore.Serializer.ISerializableTypeContext)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.DecoratorHandler.Create``1(FreecraftCore.Serializer.ISerializableTypeContext)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.DecoratorHandler.GetAssociatedSerializationContexts(FreecraftCore.Serializer.ISerializableTypeContext)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.DecoratorHandler.TryCreateSerializer``1(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Creates a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the provided <paramref name="context"/>.
            </summary>
            <param name="context">Type the serializer is for.</param>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> or null if one could not be constructed.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.ISerializerDecoraterHandler">
            <summary>
            Contract for a decorater handler.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializerDecoraterHandler.CanHandle(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.ISerializerDecoraterHandler"/> is able to handle the specified <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>.
            </summary>
            <param name="context">The member context.</param>
            <exception cref="T:System.ArgumentNullException">Throws null if the provided <see cref="!:context"/> is null.</exception>
            <returns>True if the handler can decorate for the serialization of the specified <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializerDecoraterHandler.GetAssociatedSerializationContexts(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Gets a collection of <see cref="T:System.Type"/> objects that represent all of the required types that must be
            registered for this decorator to work. These should be registered before attempting to use the decorator.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentNullException">Throws null if the provided <see cref="!:context"/> is null.</exception>
            <returns>Returns a collection of related <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>s</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.API.Extensions.IContextualSerializerProviderExtensions.Get(FreecraftCore.Serializer.IContextualSerializerProvider,FreecraftCore.Serializer.ContextTypeFlags,FreecraftCore.Serializer.IContextKey,System.Type)">
            <summary>
            Provides a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the <see cref="T:System.Type"/> if there is a conextual serializer for the given <paramref name="key"/>.
            </summary>
            <param name="provider">The extended object.</param>
            <param name="contextFlags">The context flags that indicate the type of context.</param>
            <param name="type">The type the <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> serializes.</param>
            <param name="key">Context key.</param>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the given context or null if none were available.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.API.Extensions.IContextualSerializerProviderExtensions.HasSerializerFor(FreecraftCore.Serializer.IContextualSerializerProvider,FreecraftCore.Serializer.ContextTypeFlags,FreecraftCore.Serializer.IContextKey,System.Type)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.IContextualSerializerProvider"/> has a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for
            the provided <see cref="T:System.Type"/> and context.
            </summary>
            <param name="provider">The extended object.</param>
            <param name="contextFlags">The context flags that indicate the type of context.</param>
            <param name="type">Type to lookup a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for.</param>
            <param name="key">Context key.</param>
            <returns>True if the provider has and can provide the a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the type and context key.</returns>
        </member>
        <member name="P:FreecraftCore.Serializer.API.Reflection.DisableReadMemberSerializationMediatorDecorator`1.DecoratedMediator">
            <summary>
            The serialization mediator we're decorating.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableReadMemberSerializationMediatorDecorator`1.WriteMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableReadMemberSerializationMediatorDecorator`1.WriteMemberAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableReadMemberSerializationMediatorDecorator`1.SetMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableReadMemberSerializationMediatorDecorator`1.SetMemberAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableWriteMemberSerializationMediatorDecorator`1.WriteMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableWriteMemberSerializationMediatorDecorator`1.WriteMemberAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableWriteMemberSerializationMediatorDecorator`1.SetMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.API.Reflection.DisableWriteMemberSerializationMediatorDecorator`1.SetMemberAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.IGeneralSerializerProviderExtensions.Get``1(FreecraftCore.Serializer.IGeneralSerializerProvider)">
            <summary>
            Provides a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy`1"/> for the type <typeparamref name="TRequestedType"/> from the provided
            <see cref="T:FreecraftCore.Serializer.IGeneralSerializerProvider"/> service.
            </summary>
            <param name="provider">The extended object.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy`1"/> from the given provided or null if none were available.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IGeneralSerializerProviderExtensions.HasSerializerFor``1(FreecraftCore.Serializer.IGeneralSerializerProvider)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.IGeneralSerializerProvider"/> has a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for
            the type <typeparamref name="TTypeToCheck"/>.
            </summary>
            <param name="provider">The extended object.</param>
            <returns>True if the provider has and can provide the a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the type.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializableTypeContextExtensions.HasMemberAttribute``1(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Indicates if the context contains a specific type of metadata.
            </summary>
            <typeparam name="TAttributeType">The <see cref="T:System.Attribute"/> to look for.</typeparam>
            <param name="context">Context.</param>
            <returns>True if the context has the <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializableTypeContextExtensions.GetMemberAttribute``1(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Indicates if the context contains a specific type of metadata.
            </summary>
            <typeparam name="TAttributeType">The <see cref="T:System.Attribute"/> to look for.</typeparam>
            <param name="context">Context.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns>True if the context has the <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializableTypeContextExtensions.HasContextualKey(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/> has a valid contextual lookup key.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IMemberSerializationMediatorFactory">
            <summary>
            Factory service that creates <see cref="T:FreecraftCore.Serializer.IMemberSerializationMediator`1"/> objects.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IMemberSerializationMediatorFactory.Create``1(System.Reflection.MemberInfo)">
            <summary>
            Creates a new <see cref="T:FreecraftCore.Serializer.IMemberSerializationMediator`1"/> based on the provided <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TContainingType">The type the mediator provides access to.</typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:FreecraftCore.Serializer.DefaultMemberSerializationMediator`2.WriteMemberAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.DefaultMemberSerializationMediator`2.SetMemberAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.MemberSerializationMediator`2">
            <summary>
            Tuple-like pair of the <see cref="T:System.Reflection.MemberInfo"/> context and the corresponding
            <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for serializing the member.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.MemberSerializationMediator`2.MemberGetter">
            <summary>
            Delegate that can grab the <see cref="!:MemberInformation"/> member value.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator`2.WriteMemberAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator`2.SetMemberAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator`2.WriteMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator`2.SetMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="T:FreecraftCore.Serializer.MemberSerializationMediator">
            <summary>
            Tuple-like pair of the <see cref="T:System.Reflection.MemberInfo"/> context and the corresponding
            <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for serializing the member.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.MemberSerializationMediator.MemberInformation">
            <summary>
            Cached <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.MemberSerializationMediator.TypeSerializer">
            <summary>
            Serializer to serialize for the <see cref="P:FreecraftCore.Serializer.MemberSerializationMediator.MemberInformation"/>.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator.WriteMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.MemberSerializationMediator.SetMemberAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync.WriteAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <summary>
            Perform the steps necessary to serialize this data.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="dest">The writer entity that is accumulating the output data.</param>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync.ReadAsync(FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
            <param name="source">The reader providing the input data.</param>
            <returns>The updated / replacement value.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync.ReadIntoObjectAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync.ObjectIntoWriterAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.ITypeSerializerStrategyAsync`1">
            <summary>
            Contract for type that providing serialization strategy for the provided TType.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync`1.WriteAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <summary>
            Perform the steps necessary to serialize this data.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="dest">The writer entity that is accumulating the output data.</param>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync`1.ReadAsync(FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
            <param name="source">The reader providing the input data.</param>
            <returns>The updated / replacement value.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync`1.ReadIntoObjectAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategyAsync`1.ObjectIntoWriterAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IObjectByteConverter">
            <summary>
            Contract for types that can convert <see cref="T:System.Object"/> to and from bytes.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IObjectByteConverter.GetBytes(System.Object)">
            <summary>
            Coverts the <see cref="T:System.Object"/> to byte representation.
            </summary>
            <param name="obj">Object to convert to bytes.</param>
            <returns>A non-null byte array representation of <see cref="!:obj"/>.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IObjectByteConverter`1">
            <summary>
            Contract for types that can convert <see cref="!:TObjectType"/> to and from bytes.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IObjectByteConverter`1.GetBytes(`0)">
            <summary>
            Coverts the <see cref="!:TObjectType"/> to byte representation.
            </summary>
            <param name="obj">Object to convert to bytes.</param>
            <returns>A non-null byte array representation of <see cref="!:obj"/>.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IObjectByteReader">
            <summary>
            Contract for types that can convert <see cref="T:System.Object"/> to and from bytes.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IObjectByteReader.FromBytes(System.Byte[])">
            <summary>
            Coverts the <see cref="!:byte[]"/> preresentation of an object to the object.
            </summary>
            <param name="bytes">Bytes to use for conversion.</param>
            <returns>A non-null object from the byte representation.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IObjectByteReader`1">
            <summary>
            Contract for types that can convert <see cref="!:TObjectType"/> to and from bytes.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IObjectByteReader`1.FromBytes(System.Byte[])">
            <summary>
            Coverts the <see cref="!:byte[]"/> preresentation of an object to the object.
            </summary>
            <param name="bytes">Bytes to use for conversion.</param>
            <returns>A non-null object from the byte representation.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IRuntimePolymorphicRegisterable`1">
            <summary>
            Contract for Types that can handle polymorphic runtime registeration of types.
            </summary>
            <typeparam name="TBaseType"></typeparam>
        </member>
        <member name="M:FreecraftCore.Serializer.IRuntimePolymorphicRegisterable`1.TryLink``1(System.Int32)">
            <summary>
            Tries to link a child type with the base type.
            </summary>
            <typeparam name="TChildType">Child type to link.</typeparam>
            <param name="key">Key to use.</param>
        </member>
        <member name="P:FreecraftCore.Serializer.ITypeSerializerStrategy.SerializerType">
            <summary>
            Indicates the <see cref="!:TType"/> of the serializer.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.ITypeSerializerStrategy.ContextRequirement">
            <summary>
            Indicates the context requirement for this serializer strategy.
            (Ex. If it requires context then a new one must be made or context must be provided to it for it to serializer for multiple members)
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy.Write(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <summary>
            Perform the steps necessary to serialize this data.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="dest">The writer entity that is accumulating the output data.</param>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy.Read(FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
            <param name="source">The reader providing the input data.</param>
            <returns>The updated / replacement value.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy.ReadIntoObject(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy.ObjectIntoWriter(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.ITypeSerializerStrategy`1">
            <summary>
            Contract for type that providing serialization strategy for the provided TType.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy`1.Write(`0,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <summary>
            Perform the steps necessary to serialize this data.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="dest">The writer entity that is accumulating the output data.</param>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy`1.Read(FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
            <param name="source">The reader providing the input data.</param>
            <returns>The updated / replacement value.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy`1.ReadIntoObject(`0,FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ITypeSerializerStrategy`1.ObjectIntoWriter(`0,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <summary>
            Preform the steps necessary to deserialize the data into the provided <paramref name="obj"/>.
            </summary>
            <param name="obj">Possibly null ref object of type the serializer handles.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>A non-null instance of the <typeparamref name="TType"/> object.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.SharedBufferTypeSerializer`1">
            <summary>
            Description of SharedBufferTypeSerializer.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.syncObj">
            <summary>
            Syncronization object.
            </summary>
        </member>
        <member name="P:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.SharedByteBuffer">
            <summary>
            Sharable byte buffer for 0 allocation serialization.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.Read(FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.Write(`0,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.WriteAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.ReadAsync(FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.PopulateSharedBufferWith(`0)">
            <summary>
            Implementers should populate the <see cref="P:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.SharedByteBuffer"/> with the serialized
            format of the <typeparamref name="TType"/> <see cref="!:value"/>.
            </summary>
            <param name="value">The object to populate the buffer with.</param>
            <returns>Indicates if the buffer has been populated.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.SharedBufferTypeSerializer`1.DeserializeFromBuffer(System.Byte[])">
            <summary>
            Implementers should take the <see cref="!:bytes"/>
            a <typeparamref name="TType"/> object from the byte representation.
            </summary>
            <returns>A non-null instance of <typeparamref name="TType"/> deserialized from the provided buffer.</returns>
        </member>
        <member name="P:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.SerializerType">
            <inheritdoc />
        </member>
        <member name="P:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ContextRequirement">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.Read(FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.Write(`0,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.WriteAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ReadAsync(FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.FreecraftCore#Serializer#ITypeSerializerStrategy#Write(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.FreecraftCore#Serializer#ITypeSerializerStrategy#Read(FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ReadIntoObject(`0,FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ReadIntoObject(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ObjectIntoWriter(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ObjectIntoWriter(`0,FreecraftCore.Serializer.IWireStreamWriterStrategy)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.GetBytes(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.GetBytes(`0)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.FreecraftCore#Serializer#IObjectByteReader#FromBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.FromBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ReadIntoObjectAsync(`0,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ObjectIntoWriterAsync(`0,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.WriteAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.FreecraftCore#Serializer#ITypeSerializerStrategyAsync#ReadAsync(FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ReadIntoObjectAsync(System.Object,FreecraftCore.Serializer.IWireStreamReaderStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.SimpleTypeSerializerStrategy`1.ObjectIntoWriterAsync(System.Object,FreecraftCore.Serializer.IWireStreamWriterStrategyAsync)">
            <inheritdoc />
        </member>
        <member name="M:FreecraftCore.Serializer.IContextualSerializerProvider.Get(FreecraftCore.Serializer.ContextualSerializerLookupKey)">
            <summary>
            Provides a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the <see cref="T:System.Type"/> if there is a conextual serializer for the given <paramref name="key"/>.
            </summary>
            <param name="key">Context key.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Throws if the key is not contained in the provider service.</exception>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the given context or null if none were available.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IContextualSerializerProvider.HasSerializerFor(FreecraftCore.Serializer.ContextualSerializerLookupKey)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.IGeneralSerializerProvider"/> has a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for
            the provided key.
            </summary>
            <param name="lookupKey">The lookup key to use for searching.</param>
            <returns>True if a serializer is found for the key.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IDeserializationPrototypeFactory.Create``1">
            <summary>
            Creates an empty instance of the provided generic type argument <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IDeserializationPrototypeFactory`1.Create">
            <summary>
            Creates an empty instance of the declared generic type argument of the type <typeparamref name="TType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreecraftCore.Serializer.IGeneralSerializerProvider">
            <summary>
            Service that provides <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/>s.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.IGeneralSerializerProvider.Get(System.Type)">
            <summary>
            Provides a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> serializes.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Throws if the provided <see cref="!:type"/> was not found.</exception>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> or null if none were available.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.IGeneralSerializerProvider.HasSerializerFor(System.Type)">
            <summary>
            Indicates if the <see cref="T:FreecraftCore.Serializer.IGeneralSerializerProvider"/> has a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for
            the provided <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type to lookup a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for.</param>
            <returns>True if the provider has and can provide the a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the type.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.ISerializerStrategyFactory">
            <summary>
            Service that creates <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/>s.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializerStrategyFactory.Create``1(FreecraftCore.Serializer.ISerializableTypeContext)">
            <summary>
            Creates a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the provided <see cref="T:FreecraftCore.Serializer.ISerializableTypeContext"/>
            </summary>
            <param name="context">The member context for the <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/>.</param>
            <exception cref="T:System.InvalidOperationException">If a <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> could not be created from the provided <see cref="!:context"/>.</exception>
            <returns>A valid <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/>.</returns>
        </member>
        <member name="T:FreecraftCore.Serializer.ISerializerStrategyRegistry">
            <summary>
            Contract for a serializer registry.
            </summary>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializerStrategyRegistry.RegisterType(System.Type,FreecraftCore.Serializer.ITypeSerializerStrategy)">
            <summary>
            Registers a contextless <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> for the provided type.
            </summary>
            <param name="type">The key type to register the <see cref="!:strategy"/> under.</param>
            <param name="strategy">The strategy to register.</param>
            <exception cref="T:System.ArgumentNullException">Throws if either parameter provided is null.</exception>
            <returns>True if successfully registered.</returns>
        </member>
        <member name="M:FreecraftCore.Serializer.ISerializerStrategyRegistry.RegisterType(FreecraftCore.Serializer.ContextTypeFlags,FreecraftCore.Serializer.IContextKey,System.Type,FreecraftCore.Serializer.ITypeSerializerStrategy)">
            <summary>
            Registers a serializer with the provided context.
            </summary>
            <param name="contextFlags">The context type.</param>
            <param name="key">The context key.</param>
            <param name="type">The type the <see cref="T:FreecraftCore.Serializer.ITypeSerializerStrategy"/> serializes.</param>
            <param name="strategy">The serializer strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws if either parameter provided is null.</exception>
            <returns>True if successfully registered.</returns>
        </member>
    </members>
</doc>
