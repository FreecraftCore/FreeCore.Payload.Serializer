using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace FreecraftCore.Serializer
{
	/// <summary>
	/// <see cref="ICompilationUnitEmittable"/> for emitting the source for the <see cref="AutoGeneratedTemplateSerializerStrategy"/>.
	/// </summary>
	/// <typeparam name="TSerializableType">The type to serialize.</typeparam>
	public sealed class SerializerTemplateCompilationUnitEmitter<TSerializableType> : ICompilationUnitEmittable
		where TSerializableType : new()
	{
		public string SerializerTypeName { get; } = new GeneratedSerializerNameStringBuilder<TSerializableType>().ToString();

		public string SerializableTypeName { get; } = new SerializableTypeNameStringBuilder<TSerializableType>().ToString();

		public string UnitName => SerializerTypeName;

		public CompilationUnitSyntax CreateUnit()
		{
			return CompilationUnit()
				.WithUsings
				(
					List<UsingDirectiveSyntax>
					(
						new UsingDirectiveSyntax[]
						{
							UsingDirective
								(
									IdentifierName("System")
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										QualifiedName
										(
											IdentifierName("System"),
											IdentifierName("Collections")
										),
										IdentifierName("Generic")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										QualifiedName
										(
											IdentifierName("System"),
											IdentifierName("Runtime")
										),
										IdentifierName("CompilerServices")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										IdentifierName("System"),
										IdentifierName("Text")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						}
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						NamespaceDeclaration
							(
								QualifiedName
								(
									IdentifierName("FreecraftCore"),
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											"Serializer",
											TriviaList
											(
												CarriageReturnLineFeed
											)
										)
									)
								)
							)
							.WithNamespaceKeyword
							(
								Token
								(
									TriviaList
									(
										CarriageReturnLineFeed
									),
									SyntaxKind.NamespaceKeyword,
									TriviaList
									(
										Space
									)
								)
							)
							.WithOpenBraceToken
							(
								Token
								(
									TriviaList(),
									SyntaxKind.OpenBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
							.WithMembers
							(
								SingletonList<MemberDeclarationSyntax>
								(
									ClassDeclaration
										(
											Identifier
											(
												TriviaList(),
												SerializerTypeName,
												TriviaList
												(
													new[]
													{
														Space,
														CarriageReturnLineFeed
													}
												)
											)
										)
										.WithAttributeLists
										(
											SingletonList<AttributeListSyntax>
											(
												AttributeList
													(
														SingletonSeparatedList<AttributeSyntax>
														(
															Attribute
															(
																IdentifierName("AutoGenerated")
															)
														)
													)
													.WithOpenBracketToken
													(
														Token
														(
															TriviaList
															(
																new[]
																{
																	Tab,
																	Comment("//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!"),
																	CarriageReturnLineFeed,
																	Tab,
																	Trivia
																	(
																		DocumentationCommentTrivia
																		(
																			SyntaxKind.SingleLineDocumentationCommentTrivia,
																			List<XmlNodeSyntax>
																			(
																				new XmlNodeSyntax[]
																				{
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextLiteral
																								(
																									TriviaList
																									(
																										DocumentationCommentExterior("///")
																									),
																									" ",
																									" ",
																									TriviaList()
																								)
																							)
																						),
																					XmlExampleElement
																						(
																							XmlText()
																								.WithTextTokens
																								(
																									TokenList
																									(
																										new[]
																										{
																											XmlTextNewLine
																											(
																												TriviaList(),
																												Environment.NewLine,
																												Environment.NewLine,
																												TriviaList()
																											),
																											XmlTextLiteral
																											(
																												TriviaList
																												(
																													DocumentationCommentExterior("	///")
																												),
																												" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																												" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																												TriviaList()
																											),
																											XmlTextNewLine
																											(
																												TriviaList(),
																												Environment.NewLine,
																												Environment.NewLine,
																												TriviaList()
																											),
																											XmlTextLiteral
																											(
																												TriviaList
																												(
																													DocumentationCommentExterior("	///")
																												),
																												" code for the Type: ",
																												" code for the Type: ",
																												TriviaList()
																											)
																										}
																									)
																								),
																							XmlNullKeywordElement()
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlCrefAttribute
																										(
																											NameMemberCref
																											(
																												IdentifierName(SerializableTypeName)
																											)
																										)
																									)
																								),
																							XmlText()
																								.WithTextTokens
																								(
																									TokenList
																									(
																										new[]
																										{
																											XmlTextNewLine
																											(
																												TriviaList(),
																												Environment.NewLine,
																												Environment.NewLine,
																												TriviaList()
																											),
																											XmlTextLiteral
																											(
																												TriviaList
																												(
																													DocumentationCommentExterior("	///")
																												),
																												" ",
																												" ",
																												TriviaList()
																											)
																										}
																									)
																								)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextNewLine
																								(
																									TriviaList(),
																									Environment.NewLine,
																									Environment.NewLine,
																									TriviaList()
																								)
																							)
																						)
																				}
																			)
																		)
																	),
																	Tab
																}
															),
															SyntaxKind.OpenBracketToken,
															TriviaList()
														)
													)
													.WithCloseBracketToken
													(
														Token
														(
															TriviaList(),
															SyntaxKind.CloseBracketToken,
															TriviaList
															(
																CarriageReturnLineFeed
															)
														)
													)
											)
										)
										.WithModifiers
										(
											TokenList
											(
												new[]
												{
													Token
													(
														TriviaList
														(
															Tab
														),
														SyntaxKind.InternalKeyword,
														TriviaList
														(
															Space
														)
													),
													Token
													(
														TriviaList(),
														SyntaxKind.SealedKeyword,
														TriviaList
														(
															Space
														)
													),
													Token
													(
														TriviaList(),
														SyntaxKind.PartialKeyword,
														TriviaList
														(
															Space
														)
													)
												}
											)
										)
										.WithKeyword
										(
											Token
											(
												TriviaList(),
												SyntaxKind.ClassKeyword,
												TriviaList
												(
													Space
												)
											)
										)
										.WithBaseList
										(
											BaseList
												(
													SingletonSeparatedList<BaseTypeSyntax>
													(
														SimpleBaseType
														(
															GenericName
																(
																	Identifier("BaseAutoGeneratedSerializerStrategy")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SeparatedList<TypeSyntax>
																			(
																				new SyntaxNodeOrToken[]
																				{
																					IdentifierName(SerializerTypeName),
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.CommaToken,
																						TriviaList
																						(
																							Space
																						)
																					),
																					IdentifierName(SerializableTypeName)
																				}
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					CarriageReturnLineFeed
																				)
																			)
																		)
																)
														)
													)
												)
												.WithColonToken
												(
													Token
													(
														TriviaList
														(
															Whitespace("		")
														),
														SyntaxKind.ColonToken,
														TriviaList
														(
															Space
														)
													)
												)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Tab
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithMembers
										(
											List<MemberDeclarationSyntax>
											(
												new MemberDeclarationSyntax[]
												{
													MethodDeclaration
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.VoidKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															),
															Identifier("InternalRead")
														)
														.WithModifiers
														(
															TokenList
															(
																new[]
																{
																	Token
																	(
																		TriviaList
																		(
																			new[]
																			{
																				Whitespace("		"),
																				Trivia
																				(
																					DocumentationCommentTrivia
																					(
																						SyntaxKind.SingleLineDocumentationCommentTrivia,
																						List<XmlNodeSyntax>
																						(
																							new XmlNodeSyntax[]
																							{
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList
																												(
																													DocumentationCommentExterior("///")
																												),
																												" ",
																												" ",
																												TriviaList()
																											)
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														new[]
																														{
																															XmlTextNewLine
																															(
																																TriviaList(),
																																Environment.NewLine,
																																Environment.NewLine,
																																TriviaList()
																															),
																															XmlTextLiteral
																															(
																																TriviaList
																																(
																																	DocumentationCommentExterior("		///")
																																),
																																" Auto-generated deserialization method.",
																																" Auto-generated deserialization method.",
																																TriviaList()
																															),
																															XmlTextNewLine
																															(
																																TriviaList(),
																																Environment.NewLine,
																																Environment.NewLine,
																																TriviaList()
																															),
																															XmlTextLiteral
																															(
																																TriviaList
																																(
																																	DocumentationCommentExterior("		///")
																																),
																																" ",
																																" ",
																																TriviaList()
																															)
																														}
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																										(
																											XmlName
																											(
																												Identifier("summary")
																											)
																										)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("summary")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"Value to initialize.",
																															"Value to initialize.",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("value"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"The source data buffer.",
																															"The source data buffer.",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("source"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"The initial offset into the source buffer.",
																															"The initial offset into the source buffer.",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("offset"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextNewLine
																											(
																												TriviaList(),
																												Environment.NewLine,
																												Environment.NewLine,
																												TriviaList()
																											)
																										)
																									)
																							}
																						)
																					)
																				),
																				Whitespace("		")
																			}
																		),
																		SyntaxKind.ProtectedKeyword,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.OverrideKeyword,
																		TriviaList
																		(
																			Space
																		)
																	)
																}
															)
														)
														.WithParameterList
														(
															ParameterList
																(
																	SeparatedList<ParameterSyntax>
																	(
																		new SyntaxNodeOrToken[]
																		{
																			Parameter
																				(
																					Identifier("value")
																				)
																				.WithType
																				(
																					IdentifierName
																					(
																						Identifier
																						(
																							TriviaList(),
																							SerializableTypeName,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Parameter
																				(
																					Identifier("source")
																				)
																				.WithType
																				(
																					GenericName
																						(
																							Identifier("Span")
																						)
																						.WithTypeArgumentList
																						(
																							TypeArgumentList
																								(
																									SingletonSeparatedList<TypeSyntax>
																									(
																										PredefinedType
																										(
																											Token(SyntaxKind.ByteKeyword)
																										)
																									)
																								)
																								.WithGreaterThanToken
																								(
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.GreaterThanToken,
																										TriviaList
																										(
																											Space
																										)
																									)
																								)
																						)
																				),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Parameter
																				(
																					Identifier("offset")
																				)
																				.WithModifiers
																				(
																					TokenList
																					(
																						Token
																						(
																							TriviaList(),
																							SyntaxKind.RefKeyword,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				)
																				.WithType
																				(
																					PredefinedType
																					(
																						Token
																						(
																							TriviaList(),
																							SyntaxKind.IntKeyword,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				)
																		}
																	)
																)
																.WithCloseParenToken
																(
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CloseParenToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
														)
														.WithBody
														(
															Block
																(
																	SingletonList<StatementSyntax>
																	(
																		ExpressionStatement
																			(
																				InvocationExpression
																					(
																						IdentifierName
																						(
																							Identifier
																							(
																								TriviaList
																								(
																									Whitespace("			")
																								),
																								"GeneratedRead",
																								TriviaList()
																							)
																						)
																					)
																					.WithArgumentList
																					(
																						ArgumentList
																						(
																							SeparatedList<ArgumentSyntax>
																							(
																								new SyntaxNodeOrToken[]
																								{
																									Argument
																									(
																										IdentifierName("value")
																									),
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.CommaToken,
																										TriviaList
																										(
																											Space
																										)
																									),
																									Argument
																									(
																										IdentifierName("source")
																									),
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.CommaToken,
																										TriviaList
																										(
																											Space
																										)
																									),
																									Argument
																										(
																											IdentifierName("offset")
																										)
																										.WithRefKindKeyword
																										(
																											Token
																											(
																												TriviaList(),
																												SyntaxKind.RefKeyword,
																												TriviaList
																												(
																													Space
																												)
																											)
																										)
																								}
																							)
																						)
																					)
																			)
																			.WithSemicolonToken
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.SemicolonToken,
																					TriviaList
																					(
																						CarriageReturnLineFeed
																					)
																				)
																			)
																	)
																)
																.WithOpenBraceToken
																(
																	Token
																	(
																		TriviaList
																		(
																			Whitespace("		")
																		),
																		SyntaxKind.OpenBraceToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
																.WithCloseBraceToken
																(
																	Token
																	(
																		TriviaList
																		(
																			Whitespace("		")
																		),
																		SyntaxKind.CloseBraceToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
														),
													MethodDeclaration
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.VoidKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															),
															Identifier("GeneratedRead")
														)
														.WithAttributeLists
														(
															SingletonList<AttributeListSyntax>
															(
																AttributeList
																	(
																		SingletonSeparatedList<AttributeSyntax>
																		(
																			Attribute
																				(
																					IdentifierName("MethodImpl")
																				)
																				.WithArgumentList
																				(
																					AttributeArgumentList
																					(
																						SingletonSeparatedList<AttributeArgumentSyntax>
																						(
																							AttributeArgument
																							(
																								MemberAccessExpression
																								(
																									SyntaxKind.SimpleMemberAccessExpression,
																									IdentifierName("MethodImplOptions"),
																									IdentifierName("AggressiveInlining")
																								)
																							)
																						)
																					)
																				)
																		)
																	)
																	.WithOpenBracketToken
																	(
																		Token
																		(
																			TriviaList
																			(
																				new[]
																				{
																					CarriageReturnLineFeed,
																					Whitespace("		"),
																					Comment("//Actual partial serialization auto-generated and implemented in external partial class."),
																					CarriageReturnLineFeed,
																					Whitespace("		")
																				}
																			),
																			SyntaxKind.OpenBracketToken,
																			TriviaList()
																		)
																	)
																	.WithCloseBracketToken
																	(
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CloseBracketToken,
																			TriviaList
																			(
																				CarriageReturnLineFeed
																			)
																		)
																	)
															)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList
																	(
																		Whitespace("		")
																	),
																	SyntaxKind.PartialKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithParameterList
														(
															ParameterList
															(
																SeparatedList<ParameterSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		Parameter
																			(
																				Identifier("value")
																			)
																			.WithType
																			(
																				IdentifierName
																				(
																					Identifier
																					(
																						TriviaList(),
																						SerializableTypeName,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Parameter
																			(
																				Identifier("source")
																			)
																			.WithType
																			(
																				GenericName
																					(
																						Identifier("Span")
																					)
																					.WithTypeArgumentList
																					(
																						TypeArgumentList
																							(
																								SingletonSeparatedList<TypeSyntax>
																								(
																									PredefinedType
																									(
																										Token(SyntaxKind.ByteKeyword)
																									)
																								)
																							)
																							.WithGreaterThanToken
																							(
																								Token
																								(
																									TriviaList(),
																									SyntaxKind.GreaterThanToken,
																									TriviaList
																									(
																										Space
																									)
																								)
																							)
																					)
																			),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Parameter
																			(
																				Identifier("offset")
																			)
																			.WithModifiers
																			(
																				TokenList
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.RefKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			)
																			.WithType
																			(
																				PredefinedType
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.IntKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			)
																	}
																)
															)
														)
														.WithSemicolonToken
														(
															Token
															(
																TriviaList(),
																SyntaxKind.SemicolonToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														),
													MethodDeclaration
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.VoidKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															),
															Identifier("InternalWrite")
														)
														.WithModifiers
														(
															TokenList
															(
																new[]
																{
																	Token
																	(
																		TriviaList
																		(
																			new[]
																			{
																				CarriageReturnLineFeed,
																				Whitespace("		"),
																				Trivia
																				(
																					DocumentationCommentTrivia
																					(
																						SyntaxKind.SingleLineDocumentationCommentTrivia,
																						List<XmlNodeSyntax>
																						(
																							new XmlNodeSyntax[]
																							{
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList
																												(
																													DocumentationCommentExterior("///")
																												),
																												" ",
																												" ",
																												TriviaList()
																											)
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														new[]
																														{
																															XmlTextNewLine
																															(
																																TriviaList(),
																																Environment.NewLine,
																																Environment.NewLine,
																																TriviaList()
																															),
																															XmlTextLiteral
																															(
																																TriviaList
																																(
																																	DocumentationCommentExterior("		///")
																																),
																																" Aut-generated serialization method.",
																																" Aut-generated serialization method.",
																																TriviaList()
																															),
																															XmlTextNewLine
																															(
																																TriviaList(),
																																Environment.NewLine,
																																Environment.NewLine,
																																TriviaList()
																															),
																															XmlTextLiteral
																															(
																																TriviaList
																																(
																																	DocumentationCommentExterior("		///")
																																),
																																" ",
																																" ",
																																TriviaList()
																															)
																														}
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																										(
																											XmlName
																											(
																												Identifier("summary")
																											)
																										)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("summary")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"The value to write data from.",
																															"The value to write data from.",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("value"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"The destination data buffer.",
																															"The destination data buffer.",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("destination"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									),
																								XmlExampleElement
																									(
																										SingletonList<XmlNodeSyntax>
																										(
																											XmlText()
																												.WithTextTokens
																												(
																													TokenList
																													(
																														XmlTextLiteral
																														(
																															TriviaList(),
																															"The initial offset into the destination buffer",
																															"The initial offset into the destination buffer",
																															TriviaList()
																														)
																													)
																												)
																										)
																									)
																									.WithStartTag
																									(
																										XmlElementStartTag
																											(
																												XmlName
																												(
																													Identifier("param")
																												)
																											)
																											.WithAttributes
																											(
																												SingletonList<XmlAttributeSyntax>
																												(
																													XmlNameAttribute
																													(
																														XmlName
																														(
																															Identifier
																															(
																																TriviaList
																																(
																																	Space
																																),
																																"name",
																																TriviaList()
																															)
																														),
																														Token(SyntaxKind.DoubleQuoteToken),
																														IdentifierName("offset"),
																														Token(SyntaxKind.DoubleQuoteToken)
																													)
																												)
																											)
																									)
																									.WithEndTag
																									(
																										XmlElementEndTag
																										(
																											XmlName
																											(
																												Identifier("param")
																											)
																										)
																									),
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextNewLine
																											(
																												TriviaList(),
																												Environment.NewLine,
																												Environment.NewLine,
																												TriviaList()
																											)
																										)
																									)
																							}
																						)
																					)
																				),
																				Whitespace("		")
																			}
																		),
																		SyntaxKind.ProtectedKeyword,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.OverrideKeyword,
																		TriviaList
																		(
																			Space
																		)
																	)
																}
															)
														)
														.WithParameterList
														(
															ParameterList
																(
																	SeparatedList<ParameterSyntax>
																	(
																		new SyntaxNodeOrToken[]
																		{
																			Parameter
																				(
																					Identifier("value")
																				)
																				.WithType
																				(
																					IdentifierName
																					(
																						Identifier
																						(
																							TriviaList(),
																							SerializableTypeName,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Parameter
																				(
																					Identifier("destination")
																				)
																				.WithType
																				(
																					GenericName
																						(
																							Identifier("Span")
																						)
																						.WithTypeArgumentList
																						(
																							TypeArgumentList
																								(
																									SingletonSeparatedList<TypeSyntax>
																									(
																										PredefinedType
																										(
																											Token(SyntaxKind.ByteKeyword)
																										)
																									)
																								)
																								.WithGreaterThanToken
																								(
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.GreaterThanToken,
																										TriviaList
																										(
																											Space
																										)
																									)
																								)
																						)
																				),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Parameter
																				(
																					Identifier("offset")
																				)
																				.WithModifiers
																				(
																					TokenList
																					(
																						Token
																						(
																							TriviaList(),
																							SyntaxKind.RefKeyword,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				)
																				.WithType
																				(
																					PredefinedType
																					(
																						Token
																						(
																							TriviaList(),
																							SyntaxKind.IntKeyword,
																							TriviaList
																							(
																								Space
																							)
																						)
																					)
																				)
																		}
																	)
																)
																.WithCloseParenToken
																(
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CloseParenToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
														)
														.WithBody
														(
															Block
																(
																	SingletonList<StatementSyntax>
																	(
																		ExpressionStatement
																			(
																				InvocationExpression
																					(
																						IdentifierName
																						(
																							Identifier
																							(
																								TriviaList
																								(
																									Whitespace("			")
																								),
																								"GeneratedWrite",
																								TriviaList()
																							)
																						)
																					)
																					.WithArgumentList
																					(
																						ArgumentList
																						(
																							SeparatedList<ArgumentSyntax>
																							(
																								new SyntaxNodeOrToken[]
																								{
																									Argument
																									(
																										IdentifierName("value")
																									),
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.CommaToken,
																										TriviaList
																										(
																											Space
																										)
																									),
																									Argument
																									(
																										IdentifierName("destination")
																									),
																									Token
																									(
																										TriviaList(),
																										SyntaxKind.CommaToken,
																										TriviaList
																										(
																											Space
																										)
																									),
																									Argument
																										(
																											IdentifierName("offset")
																										)
																										.WithRefKindKeyword
																										(
																											Token
																											(
																												TriviaList(),
																												SyntaxKind.RefKeyword,
																												TriviaList
																												(
																													Space
																												)
																											)
																										)
																								}
																							)
																						)
																					)
																			)
																			.WithSemicolonToken
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.SemicolonToken,
																					TriviaList
																					(
																						CarriageReturnLineFeed
																					)
																				)
																			)
																	)
																)
																.WithOpenBraceToken
																(
																	Token
																	(
																		TriviaList
																		(
																			Whitespace("		")
																		),
																		SyntaxKind.OpenBraceToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
																.WithCloseBraceToken
																(
																	Token
																	(
																		TriviaList
																		(
																			Whitespace("		")
																		),
																		SyntaxKind.CloseBraceToken,
																		TriviaList
																		(
																			CarriageReturnLineFeed
																		)
																	)
																)
														),
													MethodDeclaration
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.VoidKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															),
															Identifier("GeneratedWrite")
														)
														.WithAttributeLists
														(
															SingletonList<AttributeListSyntax>
															(
																AttributeList
																	(
																		SingletonSeparatedList<AttributeSyntax>
																		(
																			Attribute
																				(
																					IdentifierName("MethodImpl")
																				)
																				.WithArgumentList
																				(
																					AttributeArgumentList
																					(
																						SingletonSeparatedList<AttributeArgumentSyntax>
																						(
																							AttributeArgument
																							(
																								MemberAccessExpression
																								(
																									SyntaxKind.SimpleMemberAccessExpression,
																									IdentifierName("MethodImplOptions"),
																									IdentifierName("AggressiveInlining")
																								)
																							)
																						)
																					)
																				)
																		)
																	)
																	.WithOpenBracketToken
																	(
																		Token
																		(
																			TriviaList
																			(
																				new[]
																				{
																					CarriageReturnLineFeed,
																					Whitespace("		"),
																					Comment("//Actual partial serialization auto-generated and implemented in external partial class."),
																					CarriageReturnLineFeed,
																					Whitespace("		")
																				}
																			),
																			SyntaxKind.OpenBracketToken,
																			TriviaList()
																		)
																	)
																	.WithCloseBracketToken
																	(
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CloseBracketToken,
																			TriviaList
																			(
																				CarriageReturnLineFeed
																			)
																		)
																	)
															)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList
																	(
																		Whitespace("		")
																	),
																	SyntaxKind.PartialKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithParameterList
														(
															ParameterList
															(
																SeparatedList<ParameterSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		Parameter
																			(
																				Identifier("value")
																			)
																			.WithType
																			(
																				IdentifierName
																				(
																					Identifier
																					(
																						TriviaList(),
																						SerializableTypeName,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Parameter
																			(
																				Identifier("destination")
																			)
																			.WithType
																			(
																				GenericName
																					(
																						Identifier("Span")
																					)
																					.WithTypeArgumentList
																					(
																						TypeArgumentList
																							(
																								SingletonSeparatedList<TypeSyntax>
																								(
																									PredefinedType
																									(
																										Token(SyntaxKind.ByteKeyword)
																									)
																								)
																							)
																							.WithGreaterThanToken
																							(
																								Token
																								(
																									TriviaList(),
																									SyntaxKind.GreaterThanToken,
																									TriviaList
																									(
																										Space
																									)
																								)
																							)
																					)
																			),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Parameter
																			(
																				Identifier("offset")
																			)
																			.WithModifiers
																			(
																				TokenList
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.RefKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			)
																			.WithType
																			(
																				PredefinedType
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.IntKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																			)
																	}
																)
															)
														)
														.WithSemicolonToken
														(
															Token
															(
																TriviaList(),
																SyntaxKind.SemicolonToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
												}
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Tab
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
							)
							.WithCloseBraceToken
							(
								Token
								(
									TriviaList(),
									SyntaxKind.CloseBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
					)
				);
		}
	}
}
