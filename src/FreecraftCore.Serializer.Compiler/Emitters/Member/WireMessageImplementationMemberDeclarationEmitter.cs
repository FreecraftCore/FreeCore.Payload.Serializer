using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace FreecraftCore.Serializer
{
	public sealed class WireMessageImplementationMemberDeclarationEmitter<TSerializableType> : IMemberDeclarationEmittable
	{
		public string SerializerTypeName { get; }

		public WireMessageImplementationMemberDeclarationEmitter([NotNull] string serializerTypeName)
		{
			if (string.IsNullOrWhiteSpace(serializerTypeName)) throw new ArgumentException("Value cannot be null or whitespace.", nameof(serializerTypeName));
			SerializerTypeName = serializerTypeName;
		}

		//TODO: Assumes the class is partial
		//TODO: Assumes it is a class and not a struct
		//TODO: Assumes that accessibility is public
		public MemberDeclarationSyntax Create()
		{
			//If we HAVE the interface implemented AND it wasn't implemented by the auto-generated serializer
			bool requiresOverride = typeof(ISelfSerializable)
				.IsAssignableFrom(typeof(TSerializableType))
				&& typeof(TSerializableType).GetCustomAttribute<AutoGeneratedWireMessageImplementationAttribute>() == null;

			//Create actual member content
			var classDeclaration = ClassDeclaration
				(
					Identifier
					(
						TriviaList(),
						typeof(TSerializableType).Name,
						TriviaList
						(
							Space
						)
					)
				)
				.WithModifiers
				(
					TokenList
					(
						new[]
						{
							Token
							(
								TriviaList
								(
									Tab
								),
								SyntaxKind.PublicKeyword,
								TriviaList
								(
									Space
								)
							),
							Token
							(
								TriviaList(),
								SyntaxKind.PartialKeyword,
								TriviaList
								(
									Space
								)
							)
						}
					)
				)
				.WithKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.ClassKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithBaseList
				(
					BaseList
						(
							SingletonSeparatedList<BaseTypeSyntax>
							(
								SimpleBaseType
								(
									GenericName
										(
											Identifier("IWireMessage")
										)
										.WithTypeArgumentList
										(
											TypeArgumentList
												(
													SingletonSeparatedList<TypeSyntax>
													(
														IdentifierName(typeof(TSerializableType).Name)
													)
												)
												.WithGreaterThanToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.GreaterThanToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
								)
							)
						)
						.WithColonToken
						(
							Token
							(
								TriviaList(),
								SyntaxKind.ColonToken,
								TriviaList
								(
									Space
								)
							)
						)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					List<MemberDeclarationSyntax>
					(
						new MemberDeclarationSyntax[]
						{
							PropertyDeclaration
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											"Type",
											TriviaList
											(
												Space
											)
										)
									),
									Identifier
									(
										TriviaList(),
										"SerializableType",
										TriviaList
										(
											Space
										)
									)
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithExpressionBody
								(
									ArrowExpressionClause
										(
											TypeOfExpression
											(
												IdentifierName(typeof(TSerializableType).Name)
											)
										)
										.WithArrowToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.EqualsGreaterThanToken,
												TriviaList
												(
													Space
												)
											)
										)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							MethodDeclaration
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											typeof(TSerializableType).Name,
											TriviaList
											(
												Space
											)
										)
									),
									Identifier("Read")
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithParameterList
								(
									ParameterList
										(
											SeparatedList<ParameterSyntax>
											(
												new SyntaxNodeOrToken[]
												{
													Parameter
														(
															Identifier(CompilerConstants.BUFFER_NAME)
														)
														.WithType
														(
															GenericName
																(
																	Identifier("Span")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SingletonSeparatedList<TypeSyntax>
																			(
																				PredefinedType
																				(
																					Token(SyntaxKind.ByteKeyword)
																				)
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					Space
																				)
																			)
																		)
																)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.OFFSET_NAME)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithType
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.IntKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
												}
											)
										)
										.WithCloseParenToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.CloseParenToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
								.WithBody
								(
									Block
										(
											ExpressionStatement
												(
													InvocationExpression
														(
															MemberAccessExpression
															(
																SyntaxKind.SimpleMemberAccessExpression,
																MemberAccessExpression
																(
																	SyntaxKind.SimpleMemberAccessExpression,
																	IdentifierName
																	(
																		Identifier
																		(
																			TriviaList
																			(
																				Whitespace("			")
																			),
																			SerializerTypeName,
																			TriviaList()
																		)
																	),
																	IdentifierName("Instance")
																),
																IdentifierName("InternalRead")
															)
														)
														.WithArgumentList
														(
															ArgumentList
															(
																SeparatedList<ArgumentSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		Argument
																		(
																			ThisExpression()
																		),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Argument
																		(
																			IdentifierName(CompilerConstants.BUFFER_NAME)
																		),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Argument
																			(
																				IdentifierName(CompilerConstants.OFFSET_NAME)
																			)
																			.WithRefKindKeyword
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.RefKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																	}
																)
															)
														)
												)
												.WithSemicolonToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.SemicolonToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												),
											ReturnStatement
												(
													ThisExpression()
												)
												.WithReturnKeyword
												(
													Token
													(
														TriviaList
														(
															Whitespace("			")
														),
														SyntaxKind.ReturnKeyword,
														TriviaList
														(
															Space
														)
													)
												)
												.WithSemicolonToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.SemicolonToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								),
							MethodDeclaration
								(
									PredefinedType
									(
										Token
										(
											TriviaList(),
											SyntaxKind.VoidKeyword,
											TriviaList
											(
												Space
											)
										)
									),
									Identifier("Write")
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithParameterList
								(
									ParameterList
										(
											SeparatedList<ParameterSyntax>
											(
												new SyntaxNodeOrToken[]
												{
													Parameter
														(
															Identifier(CompilerConstants.SERIALZIABLE_OBJECT_REFERENCE_NAME)
														)
														.WithType
														(
															IdentifierName
															(
																Identifier
																(
																	TriviaList(),
																	typeof(TSerializableType).Name,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.BUFFER_NAME)
														)
														.WithType
														(
															GenericName
																(
																	Identifier("Span")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SingletonSeparatedList<TypeSyntax>
																			(
																				PredefinedType
																				(
																					Token(SyntaxKind.ByteKeyword)
																				)
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					Space
																				)
																			)
																		)
																)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.OFFSET_NAME)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithType
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.IntKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
												}
											)
										)
										.WithCloseParenToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.CloseParenToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
								.WithBody
								(
									Block
										(
											SingletonList<StatementSyntax>
											(
												ExpressionStatement
													(
														InvocationExpression
															(
																MemberAccessExpression
																(
																	SyntaxKind.SimpleMemberAccessExpression,
																	MemberAccessExpression
																	(
																		SyntaxKind.SimpleMemberAccessExpression,
																		IdentifierName
																		(
																			Identifier
																			(
																				TriviaList
																				(
																					Whitespace("			")
																				),
																				SerializerTypeName,
																				TriviaList()
																			)
																		),
																		IdentifierName("Instance")
																	),
																	IdentifierName("InternalWrite")
																)
															)
															.WithArgumentList
															(
																ArgumentList
																(
																	SeparatedList<ArgumentSyntax>
																	(
																		new SyntaxNodeOrToken[]
																		{
																			Argument
																			(
																				ThisExpression()
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																			(
																				IdentifierName(CompilerConstants.BUFFER_NAME)
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																				(
																					IdentifierName(CompilerConstants.OFFSET_NAME)
																				)
																				.WithRefKindKeyword
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.RefKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																		}
																	)
																)
															)
													)
													.WithSemicolonToken
													(
														Token
														(
															TriviaList(),
															SyntaxKind.SemicolonToken,
															TriviaList
															(
																CarriageReturnLineFeed
															)
														)
													)
											)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
						}
					)
				)
				.WithCloseBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.CloseBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				);

			//If we didn't require overriding, then we auto-implemented the IWireMessage interface
			if(!requiresOverride)
				classDeclaration = classDeclaration
					.WithAttributeLists
					(
						SingletonList<AttributeListSyntax>
						(
							AttributeList
								(
									SingletonSeparatedList<AttributeSyntax>
									(
										Attribute
										(
											IdentifierName(nameof(AutoGeneratedWireMessageImplementationAttribute))
										)
									)
								)
								.WithOpenBracketToken
								(
									Token
									(
										TriviaList
										(
											Whitespace("    ")
										),
										SyntaxKind.OpenBracketToken,
										TriviaList()
									)
								)
								.WithCloseBracketToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.CloseBracketToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					);

			NamespaceDeclarationSyntax member = NamespaceDeclaration
				(
					IdentifierName(typeof(TSerializableType).Namespace)
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						classDeclaration
					)
				);

			return member;
		}
	}
}
