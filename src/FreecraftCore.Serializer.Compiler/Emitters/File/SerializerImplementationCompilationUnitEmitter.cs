using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace FreecraftCore.Serializer
{
	/// <summary>
	/// <see cref="ICompilationUnitEmittable"/> emitter for the implementation of the serializer for the specified type.
	/// </summary>
	/// <typeparam name="TSerializableType">The type to serialize.</typeparam>
	public sealed class SerializerImplementationCompilationUnitEmitter<TSerializableType> : ICompilationUnitEmittable
		where TSerializableType : new()
	{
		public string SerializerTypeName { get; } = new GeneratedSerializerNameStringBuilder<TSerializableType>().ToString();

		public string SerializableTypeName { get; } = new SerializableTypeNameStringBuilder<TSerializableType>().ToString();

		public string UnitName => SerializerTypeName;

		public RootSerializationMethodBlockEmitter<TSerializableType> SerializationMethodEmitter { get; } = new RootSerializationMethodBlockEmitter<TSerializableType>();

		public CompilationUnitSyntax CreateUnit()
		{
			return CompilationUnit()
				.WithUsings
				(
					List<UsingDirectiveSyntax>
					(
						new UsingDirectiveSyntax[]
						{
							UsingDirective
								(
									IdentifierName("System")
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										QualifiedName
										(
											IdentifierName("System"),
											IdentifierName("Collections")
										),
										IdentifierName("Generic")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										QualifiedName
										(
											IdentifierName("System"),
											IdentifierName("Runtime")
										),
										IdentifierName("CompilerServices")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										IdentifierName("System"),
										IdentifierName("Text")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							UsingDirective
								(
									QualifiedName
									(
										IdentifierName("FreecraftCore"),
										IdentifierName("Serializer")
									)
								)
								.WithUsingKeyword
								(
									Token
									(
										TriviaList(),
										SyntaxKind.UsingKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						}
					)
				)
				.WithMembers
				(
					List<MemberDeclarationSyntax>
					(
						CreateMembers()
					)
				);
		}

		private MemberDeclarationSyntax[] CreateMembers()
		{
			//Here we're checking if the self serializable functionality
			//must be implemented for the type, which requires additional code generation
			if (typeof(TSerializableType).GetCustomAttribute<WireMessageTypeAttribute>() != null ||
			    typeof(ISelfSerializable).IsAssignableFrom(typeof(TSerializableType)))
			{
				return new MemberDeclarationSyntax[]
				{
					CreateWireMessageImplementationMember(),
					CreateSerializerImplementationNamespaceMember(),
				};
			}
			else
			{
				return new MemberDeclarationSyntax[]
				{
					CreateSerializerImplementationNamespaceMember(),
				};
			}
		}

		//TODO: Assumes the class is partial
		//TODO: Assumes it is a class and not a struct
		//TODO: Assumes that accessibility is public
		private MemberDeclarationSyntax CreateWireMessageImplementationMember()
		{
			//If we HAVE the interface implemented AND it wasn't implemented by the auto-generated serializer
			bool requiresOverride = typeof(ISelfSerializable)
				.IsAssignableFrom(typeof(TSerializableType)) 
			    && typeof(TSerializableType).GetCustomAttribute<AutoGeneratedWireMessageImplementationAttribute>() == null;

			//Create actual member content
			var classDeclaration = ClassDeclaration
				(
					Identifier
					(
						TriviaList(),
						typeof(TSerializableType).Name,
						TriviaList
						(
							Space
						)
					)
				)
				.WithModifiers
				(
					TokenList
					(
						new[]
						{
							Token
							(
								TriviaList
								(
									Tab
								),
								SyntaxKind.PublicKeyword,
								TriviaList
								(
									Space
								)
							),
							Token
							(
								TriviaList(),
								SyntaxKind.PartialKeyword,
								TriviaList
								(
									Space
								)
							)
						}
					)
				)
				.WithKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.ClassKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithBaseList
				(
					BaseList
						(
							SingletonSeparatedList<BaseTypeSyntax>
							(
								SimpleBaseType
								(
									GenericName
										(
											Identifier("IWireMessage")
										)
										.WithTypeArgumentList
										(
											TypeArgumentList
												(
													SingletonSeparatedList<TypeSyntax>
													(
														IdentifierName(typeof(TSerializableType).Name)
													)
												)
												.WithGreaterThanToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.GreaterThanToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
								)
							)
						)
						.WithColonToken
						(
							Token
							(
								TriviaList(),
								SyntaxKind.ColonToken,
								TriviaList
								(
									Space
								)
							)
						)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					List<MemberDeclarationSyntax>
					(
						new MemberDeclarationSyntax[]
						{
							PropertyDeclaration
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											"Type",
											TriviaList
											(
												Space
											)
										)
									),
									Identifier
									(
										TriviaList(),
										"SerializableType",
										TriviaList
										(
											Space
										)
									)
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithExpressionBody
								(
									ArrowExpressionClause
										(
											TypeOfExpression
											(
												IdentifierName(typeof(TSerializableType).Name)
											)
										)
										.WithArrowToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.EqualsGreaterThanToken,
												TriviaList
												(
													Space
												)
											)
										)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							MethodDeclaration
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											typeof(TSerializableType).Name,
											TriviaList
											(
												Space
											)
										)
									),
									Identifier("Read")
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithParameterList
								(
									ParameterList
										(
											SeparatedList<ParameterSyntax>
											(
												new SyntaxNodeOrToken[]
												{
													Parameter
														(
															Identifier(CompilerConstants.INPUT_BUFFER_NAME)
														)
														.WithType
														(
															GenericName
																(
																	Identifier("Span")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SingletonSeparatedList<TypeSyntax>
																			(
																				PredefinedType
																				(
																					Token(SyntaxKind.ByteKeyword)
																				)
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					Space
																				)
																			)
																		)
																)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.INPUT_OFFSET_NAME)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithType
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.IntKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
												}
											)
										)
										.WithCloseParenToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.CloseParenToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
								.WithBody
								(
									Block
										(
											ExpressionStatement
												(
													InvocationExpression
														(
															MemberAccessExpression
															(
																SyntaxKind.SimpleMemberAccessExpression,
																MemberAccessExpression
																(
																	SyntaxKind.SimpleMemberAccessExpression,
																	IdentifierName
																	(
																		Identifier
																		(
																			TriviaList
																			(
																				Whitespace("			")
																			),
																			SerializerTypeName,
																			TriviaList()
																		)
																	),
																	IdentifierName("Instance")
																),
																IdentifierName("InternalRead")
															)
														)
														.WithArgumentList
														(
															ArgumentList
															(
																SeparatedList<ArgumentSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		Argument
																		(
																			ThisExpression()
																		),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Argument
																		(
																			IdentifierName(CompilerConstants.INPUT_BUFFER_NAME)
																		),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		Argument
																			(
																				IdentifierName(CompilerConstants.INPUT_OFFSET_NAME)
																			)
																			.WithRefKindKeyword
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.RefKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																	}
																)
															)
														)
												)
												.WithSemicolonToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.SemicolonToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												),
											ReturnStatement
												(
													ThisExpression()
												)
												.WithReturnKeyword
												(
													Token
													(
														TriviaList
														(
															Whitespace("			")
														),
														SyntaxKind.ReturnKeyword,
														TriviaList
														(
															Space
														)
													)
												)
												.WithSemicolonToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.SemicolonToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								),
							MethodDeclaration
								(
									PredefinedType
									(
										Token
										(
											TriviaList(),
											SyntaxKind.VoidKeyword,
											TriviaList
											(
												Space
											)
										)
									),
									Identifier("Write")
								)
								.WithModifiers
								(
									TokenList
									(
										requiresOverride
											? new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												),
												Token
												(
													TriviaList(),
													SyntaxKind.OverrideKeyword,
													TriviaList
													(
														Space
													)
												)
											}
											: new[]
											{
												Token
												(
													TriviaList
													(
														Whitespace("		")
													),
													SyntaxKind.PublicKeyword,
													TriviaList
													(
														Space
													)
												)
											}
									)
								)
								.WithParameterList
								(
									ParameterList
										(
											SeparatedList<ParameterSyntax>
											(
												new SyntaxNodeOrToken[]
												{
													Parameter
														(
															Identifier(CompilerConstants.SERIALZIABLE_OBJECT_REFERENCE_NAME)
														)
														.WithType
														(
															IdentifierName
															(
																Identifier
																(
																	TriviaList(),
																	typeof(TSerializableType).Name,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.OUTPUT_BUFFER_NAME)
														)
														.WithType
														(
															GenericName
																(
																	Identifier("Span")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SingletonSeparatedList<TypeSyntax>
																			(
																				PredefinedType
																				(
																					Token(SyntaxKind.ByteKeyword)
																				)
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					Space
																				)
																			)
																		)
																)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.OUTPUT_OFFSET_NAME)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithType
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.IntKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
												}
											)
										)
										.WithCloseParenToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.CloseParenToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
								.WithBody
								(
									Block
										(
											SingletonList<StatementSyntax>
											(
												ExpressionStatement
													(
														InvocationExpression
															(
																MemberAccessExpression
																(
																	SyntaxKind.SimpleMemberAccessExpression,
																	MemberAccessExpression
																	(
																		SyntaxKind.SimpleMemberAccessExpression,
																		IdentifierName
																		(
																			Identifier
																			(
																				TriviaList
																				(
																					Whitespace("			")
																				),
																				SerializerTypeName,
																				TriviaList()
																			)
																		),
																		IdentifierName("Instance")
																	),
																	IdentifierName("InternalWrite")
																)
															)
															.WithArgumentList
															(
																ArgumentList
																(
																	SeparatedList<ArgumentSyntax>
																	(
																		new SyntaxNodeOrToken[]
																		{
																			Argument
																			(
																				ThisExpression()
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																			(
																				IdentifierName(CompilerConstants.OUTPUT_BUFFER_NAME)
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																				(
																					IdentifierName(CompilerConstants.OUTPUT_OFFSET_NAME)
																				)
																				.WithRefKindKeyword
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.RefKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																		}
																	)
																)
															)
													)
													.WithSemicolonToken
													(
														Token
														(
															TriviaList(),
															SyntaxKind.SemicolonToken,
															TriviaList
															(
																CarriageReturnLineFeed
															)
														)
													)
											)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
						}
					)
				)
				.WithCloseBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.CloseBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				);

			//If we didn't require overriding, then we auto-implemented the IWireMessage interface
			if(!requiresOverride)
				classDeclaration = classDeclaration
					.WithAttributeLists
					(
						SingletonList<AttributeListSyntax>
						(
							AttributeList
								(
									SingletonSeparatedList<AttributeSyntax>
									(
										Attribute
										(
											IdentifierName(nameof(AutoGeneratedWireMessageImplementationAttribute))
										)
									)
								)
								.WithOpenBracketToken
								(
									Token
									(
										TriviaList
										(
											Whitespace("    ")
										),
										SyntaxKind.OpenBracketToken,
										TriviaList()
									)
								)
								.WithCloseBracketToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.CloseBracketToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					);

			NamespaceDeclarationSyntax member = NamespaceDeclaration
				(
					IdentifierName(typeof(TSerializableType).Namespace)
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						classDeclaration
					)
				);

			return member;
		}

		private MemberDeclarationSyntax CreateSerializerImplementationNamespaceMember()
		{
			return NamespaceDeclaration
				(
					QualifiedName
					(
						IdentifierName("FreecraftCore"),
						IdentifierName
						(
							Identifier
							(
								TriviaList(),
								"Serializer",
								TriviaList
								(
									CarriageReturnLineFeed
								)
							)
						)
					)
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList
						(
							CarriageReturnLineFeed
						),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						ClassDeclaration
							(
								Identifier
								(
									TriviaList(),
									SerializerTypeName,
									TriviaList
									(
										new[]
										{
											Space,
											CarriageReturnLineFeed
										}
									)
								)
							)
							.WithModifiers
							(
								TokenList
								(
									new[]
									{
										Token
										(
											TriviaList
											(
												new[]
												{
													Tab,
													Comment("//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!"),
													CarriageReturnLineFeed,
													Tab,
													Trivia
													(
														DocumentationCommentTrivia
														(
															SyntaxKind.SingleLineDocumentationCommentTrivia,
															List<XmlNodeSyntax>
															(
																new XmlNodeSyntax[]
																{
																	XmlText()
																		.WithTextTokens
																		(
																			TokenList
																			(
																				XmlTextLiteral
																				(
																					TriviaList
																					(
																						DocumentationCommentExterior("///")
																					),
																					" ",
																					" ",
																					TriviaList()
																				)
																			)
																		),
																	XmlExampleElement
																		(
																			XmlText()
																				.WithTextTokens
																				(
																					TokenList
																					(
																						new[]
																						{
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																								" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																								TriviaList()
																							),
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" code for the Type: ",
																								" code for the Type: ",
																								TriviaList()
																							)
																						}
																					)
																				),
																			XmlNullKeywordElement()
																				.WithAttributes
																				(
																					SingletonList<XmlAttributeSyntax>
																					(
																						XmlCrefAttribute
																						(
																							NameMemberCref
																							(
																								IdentifierName(SerializableTypeName)
																							)
																						)
																					)
																				),
																			XmlText()
																				.WithTextTokens
																				(
																					TokenList
																					(
																						new[]
																						{
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" ",
																								" ",
																								TriviaList()
																							)
																						}
																					)
																				)
																		)
																		.WithStartTag
																		(
																			XmlElementStartTag
																			(
																				XmlName
																				(
																					Identifier("summary")
																				)
																			)
																		)
																		.WithEndTag
																		(
																			XmlElementEndTag
																			(
																				XmlName
																				(
																					Identifier("summary")
																				)
																			)
																		),
																	XmlText()
																		.WithTextTokens
																		(
																			TokenList
																			(
																				XmlTextNewLine
																				(
																					TriviaList(),
																					Environment.NewLine,
																					Environment.NewLine,
																					TriviaList()
																				)
																			)
																		)
																}
															)
														)
													),
													Tab
												}
											),
											SyntaxKind.PublicKeyword,
											TriviaList
											(
												Space
											)
										),
										Token
										(
											TriviaList(),
											SyntaxKind.SealedKeyword,
											TriviaList
											(
												Space
											)
										),
										Token
										(
											TriviaList(),
											SyntaxKind.PartialKeyword,
											TriviaList
											(
												Space
											)
										)
									}
								)
							)
							.WithKeyword
							(
								Token
								(
									TriviaList(),
									SyntaxKind.ClassKeyword,
									TriviaList
									(
										Space
									)
								)
							)
							.WithBaseList
							(
								BaseList
									(
										SingletonSeparatedList<BaseTypeSyntax>
										(
											SimpleBaseType
											(
												GenericName
													(
														Identifier("BaseAutoGeneratedSerializerStrategy")
													)
													.WithTypeArgumentList
													(
														TypeArgumentList
															(
																SeparatedList<TypeSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		IdentifierName(SerializerTypeName),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		IdentifierName(SerializableTypeName)
																	}
																)
															)
															.WithGreaterThanToken
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.GreaterThanToken,
																	TriviaList
																	(
																		CarriageReturnLineFeed
																	)
																)
															)
													)
											)
										)
									)
									.WithColonToken
									(
										Token
										(
											TriviaList
											(
												Whitespace("		")
											),
											SyntaxKind.ColonToken,
											TriviaList
											(
												Space
											)
										)
									)
							)
							.WithOpenBraceToken
							(
								Token
								(
									TriviaList
									(
										Tab
									),
									SyntaxKind.OpenBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
							.WithMembers
							(
								List<MemberDeclarationSyntax>
								(
									new MemberDeclarationSyntax[]
										{
											MethodDeclaration
												(
													PredefinedType
													(
														Token
														(
															TriviaList(),
															SyntaxKind.VoidKeyword,
															TriviaList
															(
																Space
															)
														)
													),
													Identifier("InternalRead")
												)
												.WithModifiers
												(
													TokenList
													(
														Token
														(
															TriviaList
															(
																new[]
																{
																	Whitespace("		"),
																	Trivia
																	(
																		DocumentationCommentTrivia
																		(
																			SyntaxKind.SingleLineDocumentationCommentTrivia,
																			List<XmlNodeSyntax>
																			(
																				new XmlNodeSyntax[]
																				{
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextLiteral
																								(
																									TriviaList
																									(
																										DocumentationCommentExterior("///")
																									),
																									" ",
																									" ",
																									TriviaList()
																								)
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" Auto-generated deserialization/read method.",
																													" Auto-generated deserialization/read method.",
																													TriviaList()
																												),
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" Partial method implemented from shared partial definition.",
																													" Partial method implemented from shared partial definition.",
																													TriviaList()
																												),
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("value"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("source"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("offset"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextNewLine
																								(
																									TriviaList(),
																									Environment.NewLine,
																									Environment.NewLine,
																									TriviaList()
																								)
																							)
																						)
																				}
																			)
																		)
																	),
																	Whitespace("		")
																}
															),
															SyntaxKind.ProtectedKeyword,
															TriviaList
															(
																Space
															)
														),
														Token
														(
															TriviaList(),
															SyntaxKind.InternalKeyword,
															TriviaList
															(
																Space
															)
														),
														Token
														(
															TriviaList(),
															SyntaxKind.OverrideKeyword,
															TriviaList
															(
																Space
															)
														)
													)
												)
												.WithParameterList
												(
													ParameterList
														(
															SeparatedList<ParameterSyntax>
															(
																new SyntaxNodeOrToken[]
																{
																	Parameter
																		(
																			Identifier("value")
																		)
																		.WithType
																		(
																			IdentifierName
																			(
																				Identifier
																				(
																					TriviaList(),
																					SerializableTypeName,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CommaToken,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Parameter
																		(
																			Identifier("source")
																		)
																		.WithType
																		(
																			GenericName
																				(
																					Identifier("Span")
																				)
																				.WithTypeArgumentList
																				(
																					TypeArgumentList
																						(
																							SingletonSeparatedList<TypeSyntax>
																							(
																								PredefinedType
																								(
																									Token(SyntaxKind.ByteKeyword)
																								)
																							)
																						)
																						.WithGreaterThanToken
																						(
																							Token
																							(
																								TriviaList(),
																								SyntaxKind.GreaterThanToken,
																								TriviaList
																								(
																									Space
																								)
																							)
																						)
																				)
																		),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CommaToken,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Parameter
																		(
																			Identifier("offset")
																		)
																		.WithModifiers
																		(
																			TokenList
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.RefKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		)
																		.WithType
																		(
																			PredefinedType
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.IntKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		)
																}
															)
														)
														.WithCloseParenToken
														(
															Token
															(
																TriviaList(),
																SyntaxKind.CloseParenToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
												)
												.WithBody
												(
													CreateReadBlock()
														.WithOpenBraceToken
														(
															Token
															(
																TriviaList
																(
																	Whitespace("		")
																),
																SyntaxKind.OpenBraceToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
														.WithCloseBraceToken
														(
															Token
															(
																TriviaList
																(
																	Whitespace("		")
																),
																SyntaxKind.CloseBraceToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
												),
											MethodDeclaration
												(
													PredefinedType
													(
														Token
														(
															TriviaList(),
															SyntaxKind.VoidKeyword,
															TriviaList
															(
																Space
															)
														)
													),
													Identifier("InternalWrite")
												)
												.WithModifiers
												(
													TokenList
													(
														Token
														(
															TriviaList
															(
																new[]
																{
																	CarriageReturnLineFeed,
																	Trivia
																	(
																		DocumentationCommentTrivia
																		(
																			SyntaxKind.SingleLineDocumentationCommentTrivia,
																			List<XmlNodeSyntax>
																			(
																				new XmlNodeSyntax[]
																				{
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextLiteral
																								(
																									TriviaList
																									(
																										DocumentationCommentExterior("///")
																									),
																									" ",
																									" ",
																									TriviaList()
																								)
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											new[]
																											{
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" Auto-generated serialization/write method.",
																													" Auto-generated serialization/write method.",
																													TriviaList()
																												),
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" Partial method implemented from shared partial definition.",
																													" Partial method implemented from shared partial definition.",
																													TriviaList()
																												),
																												XmlTextNewLine
																												(
																													TriviaList(),
																													Environment.NewLine,
																													Environment.NewLine,
																													TriviaList()
																												),
																												XmlTextLiteral
																												(
																													TriviaList
																													(
																														DocumentationCommentExterior("		///")
																													),
																													" ",
																													" ",
																													TriviaList()
																												)
																											}
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("summary")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("value"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("destination"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								new[]
																								{
																									XmlTextNewLine
																									(
																										TriviaList(),
																										Environment.NewLine,
																										Environment.NewLine,
																										TriviaList()
																									),
																									XmlTextLiteral
																									(
																										TriviaList
																										(
																											DocumentationCommentExterior("		///")
																										),
																										" ",
																										" ",
																										TriviaList()
																									)
																								}
																							)
																						),
																					XmlExampleElement
																						(
																							SingletonList<XmlNodeSyntax>
																							(
																								XmlText()
																									.WithTextTokens
																									(
																										TokenList
																										(
																											XmlTextLiteral
																											(
																												TriviaList(),
																												"See external doc.",
																												"See external doc.",
																												TriviaList()
																											)
																										)
																									)
																							)
																						)
																						.WithStartTag
																						(
																							XmlElementStartTag
																								(
																									XmlName
																									(
																										Identifier("param")
																									)
																								)
																								.WithAttributes
																								(
																									SingletonList<XmlAttributeSyntax>
																									(
																										XmlNameAttribute
																										(
																											XmlName
																											(
																												Identifier
																												(
																													TriviaList
																													(
																														Space
																													),
																													"name",
																													TriviaList()
																												)
																											),
																											Token(SyntaxKind.DoubleQuoteToken),
																											IdentifierName("offset"),
																											Token(SyntaxKind.DoubleQuoteToken)
																										)
																									)
																								)
																						)
																						.WithEndTag
																						(
																							XmlElementEndTag
																							(
																								XmlName
																								(
																									Identifier("param")
																								)
																							)
																						),
																					XmlText()
																						.WithTextTokens
																						(
																							TokenList
																							(
																								XmlTextNewLine
																								(
																									TriviaList(),
																									Environment.NewLine,
																									Environment.NewLine,
																									TriviaList()
																								)
																							)
																						)
																				}
																			)
																		)
																	),
																	Whitespace("		")
																}
															),
															SyntaxKind.ProtectedKeyword,
															TriviaList
															(
																Space
															)
														),
														Token
														(
															TriviaList(),
															SyntaxKind.InternalKeyword,
															TriviaList
															(
																Space
															)
														),
														Token
														(
															TriviaList(),
															SyntaxKind.OverrideKeyword,
															TriviaList
															(
																Space
															)
														)
													)
												)
												.WithParameterList
												(
													ParameterList
														(
															SeparatedList<ParameterSyntax>
															(
																new SyntaxNodeOrToken[]
																{
																	Parameter
																		(
																			Identifier("value")
																		)
																		.WithType
																		(
																			IdentifierName
																			(
																				Identifier
																				(
																					TriviaList(),
																					SerializableTypeName,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CommaToken,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Parameter
																		(
																			Identifier("destination")
																		)
																		.WithType
																		(
																			GenericName
																				(
																					Identifier("Span")
																				)
																				.WithTypeArgumentList
																				(
																					TypeArgumentList
																						(
																							SingletonSeparatedList<TypeSyntax>
																							(
																								PredefinedType
																								(
																									Token(SyntaxKind.ByteKeyword)
																								)
																							)
																						)
																						.WithGreaterThanToken
																						(
																							Token
																							(
																								TriviaList(),
																								SyntaxKind.GreaterThanToken,
																								TriviaList
																								(
																									Space
																								)
																							)
																						)
																				)
																		),
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.CommaToken,
																		TriviaList
																		(
																			Space
																		)
																	),
																	Parameter
																		(
																			Identifier("offset")
																		)
																		.WithModifiers
																		(
																			TokenList
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.RefKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		)
																		.WithType
																		(
																			PredefinedType
																			(
																				Token
																				(
																					TriviaList(),
																					SyntaxKind.IntKeyword,
																					TriviaList
																					(
																						Space
																					)
																				)
																			)
																		)
																}
															)
														)
														.WithCloseParenToken
														(
															Token
															(
																TriviaList(),
																SyntaxKind.CloseParenToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
												)
												.WithBody
												(
													CreateWriteBlock()
														.WithOpenBraceToken
														(
															Token
															(
																TriviaList
																(
																	Whitespace("		")
																),
																SyntaxKind.OpenBraceToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
														.WithCloseBraceToken
														(
															Token
															(
																TriviaList
																(
																	CarriageReturnLineFeed, //Custom added linebreak!
																	Whitespace("		")
																),
																SyntaxKind.CloseBraceToken,
																TriviaList
																(
																	CarriageReturnLineFeed
																)
															)
														)
												)
										}
										.Concat(SerializationMethodEmitter
											.CreateClasses()) //This embeds our required classes into the Type
								)
							)
							.WithCloseBraceToken
							(
								Token
								(
									TriviaList
									(
										Tab
									),
									SyntaxKind.CloseBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
					)
				)
				.WithCloseBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.CloseBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				);
		}

		private BlockSyntax CreateWriteBlock()
		{
			SerializationMethodEmitter.Mode = SerializationMode.Write;
			return SerializationMethodEmitter
				.CreateBlock();
		}

		private BlockSyntax CreateReadBlock()
		{
			SerializationMethodEmitter.Mode = SerializationMode.Read;
			return SerializationMethodEmitter
				.CreateBlock();
		}
	}
}
