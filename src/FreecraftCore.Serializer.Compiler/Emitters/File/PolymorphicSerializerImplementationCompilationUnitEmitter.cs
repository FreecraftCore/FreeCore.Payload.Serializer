using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace FreecraftCore.Serializer
{
	public sealed class PolymorphicSerializerImplementationCompilationUnitEmitter<TSerializableType> : BaseSerializerImplementationCompilationUnitEmitter<TSerializableType> 
		where TSerializableType : new()
	{
		protected override MemberDeclarationSyntax CreateSerializerImplementationNamespaceMember()
		{
			return NamespaceDeclaration
				(
					QualifiedName
					(
						IdentifierName("FreecraftCore"),
						IdentifierName
						(
							Identifier
							(
								TriviaList(),
								"Serializer",
								TriviaList
								(
									CarriageReturnLineFeed
								)
							)
						)
					)
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						ClassDeclaration
							(
								Identifier
								(
									TriviaList(),
									SerializerTypeName,
									TriviaList
									(
										new[]
										{
											Space,
											CarriageReturnLineFeed
										}
									)
								)
							)
							.WithModifiers
							(
								TokenList
								(
									new[]
									{
										Token
										(
											TriviaList
											(
												new[]
												{
													Tab,
													Comment("//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!"),
													CarriageReturnLineFeed,
													Tab,
													Trivia
													(
														DocumentationCommentTrivia
														(
															SyntaxKind.SingleLineDocumentationCommentTrivia,
															List<XmlNodeSyntax>
															(
																new XmlNodeSyntax[]
																{
																	XmlText()
																		.WithTextTokens
																		(
																			TokenList
																			(
																				XmlTextLiteral
																				(
																					TriviaList
																					(
																						DocumentationCommentExterior("///")
																					),
																					" ",
																					" ",
																					TriviaList()
																				)
																			)
																		),
																	XmlExampleElement
																		(
																			XmlText()
																				.WithTextTokens
																				(
																					TokenList
																					(
																						new[]
																						{
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																								" FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization",
																								TriviaList()
																							),
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" code for the Type: ",
																								" code for the Type: ",
																								TriviaList()
																							)
																						}
																					)
																				),
																			XmlNullKeywordElement()
																				.WithAttributes
																				(
																					SingletonList<XmlAttributeSyntax>
																					(
																						XmlCrefAttribute
																						(
																							NameMemberCref
																							(
																								IdentifierName(SerializableTypeName)
																							)
																						)
																					)
																				),
																			XmlText()
																				.WithTextTokens
																				(
																					TokenList
																					(
																						new[]
																						{
																							XmlTextNewLine
																							(
																								TriviaList(),
																								Environment.NewLine,
																								Environment.NewLine,
																								TriviaList()
																							),
																							XmlTextLiteral
																							(
																								TriviaList
																								(
																									DocumentationCommentExterior("	///")
																								),
																								" ",
																								" ",
																								TriviaList()
																							)
																						}
																					)
																				)
																		)
																		.WithStartTag
																		(
																			XmlElementStartTag
																			(
																				XmlName
																				(
																					Identifier("summary")
																				)
																			)
																		)
																		.WithEndTag
																		(
																			XmlElementEndTag
																			(
																				XmlName
																				(
																					Identifier("summary")
																				)
																			)
																		),
																	XmlText()
																		.WithTextTokens
																		(
																			TokenList
																			(
																				XmlTextNewLine
																				(
																					TriviaList(),
																					Environment.NewLine,
																					Environment.NewLine,
																					TriviaList()
																				)
																			)
																		)
																}
															)
														)
													),
													Tab
												}
											),
											SyntaxKind.PublicKeyword,
											TriviaList
											(
												Space
											)
										),
										Token
										(
											TriviaList(),
											SyntaxKind.SealedKeyword,
											TriviaList
											(
												Space
											)
										),
										Token
										(
											TriviaList(),
											SyntaxKind.PartialKeyword,
											TriviaList
											(
												Space
											)
										)
									}
								)
							)
							.WithKeyword
							(
								Token
								(
									TriviaList(),
									SyntaxKind.ClassKeyword,
									TriviaList
									(
										Space
									)
								)
							)
							.WithBaseList
							(
								BaseList
									(
										SingletonSeparatedList<BaseTypeSyntax>
										(
											SimpleBaseType
											(
												GenericName
													(
														Identifier("BasePolymorphicAutoGeneratedSerializerStrategy")
													)
													.WithTypeArgumentList
													(
														TypeArgumentList
															(
																SeparatedList<TypeSyntax>
																(
																	new SyntaxNodeOrToken[]
																	{
																		IdentifierName(SerializerTypeName),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		IdentifierName(SerializableTypeName),
																		Token
																		(
																			TriviaList(),
																			SyntaxKind.CommaToken,
																			TriviaList
																			(
																				Space
																			)
																		),
																		PredefinedType
																		(
																			Token(SyntaxKind.IntKeyword)
																		)
																	}
																)
															)
															.WithGreaterThanToken
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.GreaterThanToken,
																	TriviaList
																	(
																		CarriageReturnLineFeed
																	)
																)
															)
													)
											)
										)
									)
									.WithColonToken
									(
										Token
										(
											TriviaList
											(
												Whitespace("		")
											),
											SyntaxKind.ColonToken,
											TriviaList
											(
												Space
											)
										)
									)
							)
							.WithOpenBraceToken
							(
								Token
								(
									TriviaList
									(
										Tab
									),
									SyntaxKind.OpenBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
							.WithMembers
							(
								SingletonList<MemberDeclarationSyntax>
								(
									MethodDeclaration
										(
											IdentifierName
											(
												Identifier
												(
													TriviaList(),
													SerializableTypeName,
													TriviaList
													(
														Space
													)
												)
											),
											Identifier("CreateType")
										)
										.WithModifiers
										(
											TokenList
											(
												new[]
												{
													Token
													(
														TriviaList
														(
															Whitespace("		")
														),
														SyntaxKind.ProtectedKeyword,
														TriviaList
														(
															Space
														)
													),
													Token
													(
														TriviaList(),
														SyntaxKind.OverrideKeyword,
														TriviaList
														(
															Space
														)
													)
												}
											)
										)
										.WithParameterList
										(
											ParameterList
												(
													SingletonSeparatedList<ParameterSyntax>
													(
														Parameter
															(
																Identifier("key")
															)
															.WithType
															(
																PredefinedType
																(
																	Token
																	(
																		TriviaList(),
																		SyntaxKind.IntKeyword,
																		TriviaList
																		(
																			Space
																		)
																	)
																)
															)
													)
												)
												.WithCloseParenToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.CloseParenToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
										.WithBody
										(
											Block
												(
													SingletonList<StatementSyntax>
													(
														SwitchStatement
															(
																IdentifierName("key")
															)
															.WithSwitchKeyword
															(
																Token
																(
																	TriviaList
																	(
																		Whitespace("			")
																	),
																	SyntaxKind.SwitchKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
															.WithCloseParenToken
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.CloseParenToken,
																	TriviaList
																	(
																		CarriageReturnLineFeed
																	)
																)
															)
															.WithOpenBraceToken
															(
																Token
																(
																	TriviaList
																	(
																		Whitespace("			")
																	),
																	SyntaxKind.OpenBraceToken,
																	TriviaList
																	(
																		CarriageReturnLineFeed
																	)
																)
															)
															.WithSections
															(
																List<SwitchSectionSyntax>
																(
																	BuildSwitchStatements()
																)
															)
															.WithCloseBraceToken
															(
																Token
																(
																	TriviaList
																	(
																		Whitespace("			")
																	),
																	SyntaxKind.CloseBraceToken,
																	TriviaList
																	(
																		CarriageReturnLineFeed
																	)
																)
															)
													)
												)
												.WithOpenBraceToken
												(
													Token
													(
														TriviaList
														(
															Whitespace("		")
														),
														SyntaxKind.OpenBraceToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
												.WithCloseBraceToken
												(
													Token
													(
														TriviaList
														(
															Whitespace("		")
														),
														SyntaxKind.CloseBraceToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
								)
							)
							.WithCloseBraceToken
							(
								Token
								(
									TriviaList
									(
										Tab
									),
									SyntaxKind.CloseBraceToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
					)
				)
				.WithCloseBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.CloseBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				);
		}

		private IEnumerable<SwitchSectionSyntax> BuildSwitchStatements()
		{
			//Every type that is a child type in the same assembly
			foreach (Type childType in typeof(TSerializableType)
				.Assembly
				.GetExportedTypes()
				.Where(t => typeof(TSerializableType).IsAssignableFrom(t))
				.Where(t => t.GetCustomAttribute<WireDataContractAttribute>() != null && t.GetCustomAttribute<WireDataContractBaseLinkAttribute>() != null))
			{
				WireDataContractBaseLinkAttribute baseLinkAttribute = childType.GetCustomAttribute<WireDataContractBaseLinkAttribute>();

				yield return SwitchSection()
					.WithLabels
					(
						SingletonList<SwitchLabelSyntax>
						(
							CaseSwitchLabel
								(
									LiteralExpression
									(
										SyntaxKind.NumericLiteralExpression,
										Literal(baseLinkAttribute.Index)
									)
								)
								.WithKeyword
								(
									Token
									(
										TriviaList
										(
											Whitespace("				")
										),
										SyntaxKind.CaseKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithColonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.ColonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					)
					.WithStatements
					(
						SingletonList<StatementSyntax>
						(
							ReturnStatement
								(
									ObjectCreationExpression
										(
											IdentifierName(childType.FullName)
										)
										.WithNewKeyword
										(
											Token
											(
												TriviaList(),
												SyntaxKind.NewKeyword,
												TriviaList
												(
													Space
												)
											)
										)
										.WithArgumentList
										(
											ArgumentList()
										)
								)
								.WithReturnKeyword
								(
									Token
									(
										TriviaList
										(
											Whitespace("					")
										),
										SyntaxKind.ReturnKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					);
			}

			DefaultChildAttribute defaultChildAttribute = typeof(TSerializableType).GetCustomAttribute<DefaultChildAttribute>();

			if (defaultChildAttribute != null)
			{
				yield return SwitchSection()
					.WithLabels
					(
						SingletonList<SwitchLabelSyntax>
						(
							DefaultSwitchLabel()
								.WithKeyword
								(
									Token
									(
										TriviaList
										(
											Whitespace("				")
										),
										SyntaxKind.DefaultKeyword,
										TriviaList()
									)
								)
								.WithColonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.ColonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					)
					.WithStatements
					(
						SingletonList<StatementSyntax>
						(
							ReturnStatement
								(
									ObjectCreationExpression
										(
											IdentifierName(defaultChildAttribute.ChildType.FullName)
										)
										.WithNewKeyword
										(
											Token
											(
												TriviaList(),
												SyntaxKind.NewKeyword,
												TriviaList
												(
													Space
												)
											)
										)
										.WithArgumentList
										(
											ArgumentList()
										)
								)
								.WithReturnKeyword
								(
									Token
									(
										TriviaList
										(
											Whitespace("					")
										),
										SyntaxKind.ReturnKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
					);
			}
		}
	}
}
